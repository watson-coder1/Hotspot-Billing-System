#!/bin/bash

# WiFi Billing System Setup Script
# This script automates the setup of PHPNuxBill + FreeRADIUS with M-pesa integration

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if Docker and Docker Compose are installed
check_dependencies() {
    print_status "Checking dependencies..."
    
    if ! command -v docker &> /dev/null; then
        print_error "Docker is not installed. Please install Docker first."
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        print_error "Docker Compose is not installed. Please install Docker Compose first."
        exit 1
    fi
    
    print_success "Dependencies check passed"
}

# Create .env file if it doesn't exist
setup_env() {
    print_status "Setting up environment configuration..."
    
    if [ ! -f .env ]; then
        if [ -f env.example ]; then
            cp env.example .env
            print_warning "Created .env file from template. Please edit it with your actual values."
        else
            print_error "No env.example file found. Please create a .env file manually."
            exit 1
        fi
    else
        print_success ".env file already exists"
    fi
}

# Generate secure passwords
generate_passwords() {
    print_status "Generating secure passwords..."
    
    # Generate random passwords
    DB_PASSWORD=$(openssl rand -base64 32)
    RADIUS_SECRET=$(openssl rand -base64 32)
    ROUTER_SECRET=$(openssl rand -base64 32)
    
    # Update .env file with generated passwords
    sed -i "s/your_secure_password_here/$DB_PASSWORD/" .env
    sed -i "s/your_radius_secret_key/$RADIUS_SECRET/" .env
    sed -i "s/your_router_secret/$ROUTER_SECRET/" .env
    
    print_success "Generated secure passwords"
}

# Start the containers
start_containers() {
    print_status "Starting containers..."
    
    docker-compose up -d
    
    print_success "Containers started successfully"
}

# Wait for services to be ready
wait_for_services() {
    print_status "Waiting for services to be ready..."
    
    # Wait for MySQL
    print_status "Waiting for MySQL..."
    timeout=60
    counter=0
    while ! docker-compose exec mysql mysqladmin ping -h"localhost" -u"root" -p"${DB_PASSWORD}" --silent 2>/dev/null; do
        counter=$((counter + 1))
        if [ $counter -gt $timeout ]; then
            print_error "MySQL failed to start within $timeout seconds"
            exit 1
        fi
        sleep 2
    done
    print_success "MySQL is ready"
    
    # Wait for web application
    print_status "Waiting for web application..."
    timeout=60
    counter=0
    while ! curl -f http://localhost >/dev/null 2>&1; do
        counter=$((counter + 1))
        if [ $counter -gt $timeout ]; then
            print_error "Web application failed to start within $timeout seconds"
            exit 1
        fi
        sleep 2
    done
    print_success "Web application is ready"
}

# Setup PHPNuxBill
setup_phpnuxbill() {
    print_status "Setting up PHPNuxBill..."
    
    # Check if PHPNuxBill is accessible
    if curl -f http://localhost >/dev/null 2>&1; then
        print_success "PHPNuxBill is accessible at http://localhost"
        print_warning "Please complete the PHPNuxBill installation wizard in your browser"
        print_warning "Default admin credentials: admin@yourdomain.com / admin123"
    else
        print_error "PHPNuxBill is not accessible"
        exit 1
    fi
}

# Setup FreeRADIUS
setup_freeradius() {
    print_status "Setting up FreeRADIUS..."
    
    # Test RADIUS connection
    if docker-compose exec freeradius radtest testing password localhost 0 testing123 2>/dev/null; then
        print_success "FreeRADIUS is working correctly"
    else
        print_warning "FreeRADIUS test failed, but this might be normal during initial setup"
    fi
}

# Create MikroTik configuration script
create_mikrotik_config() {
    print_status "Creating MikroTik configuration script..."
    
    cat > mikrotik_setup.rsc << EOF
# MikroTik Hotspot Configuration Script
# Generated by WiFi Billing System Setup

# Enable hotspot
/ip hotspot profile add name="billing" hotspot-address=0.0.0.0/0 dns-name="" login-page="" login-page-timeout=5m idle-timeout=1h keepalive-timeout=2m login-timeout=1m mac-cookie-timeout=1h split-user-domain=no use-radius=yes radius-accounting=yes radius-interim-update=5m nas-port-type=wireless-802.11

# Configure RADIUS
/radius add service=hotspot address=$(hostname -I | awk '{print $1}') secret=$RADIUS_SECRET auth-port=1812 acct-port=1813 timeout=3s retransmit=3

# Create hotspot interface
/ip hotspot add interface=wlan1 profile=billing

# Configure DNS
/ip dns set servers=8.8.8.8,8.8.4.4

# Configure NAT
/ip firewall nat add chain=srcnat out-interface=ether1 action=masquerade

print "MikroTik configuration completed"
print "Please import this script into your MikroTik router"
EOF
    
    print_success "MikroTik configuration script created: mikrotik_setup.rsc"
}

# Create M-pesa integration guide
create_mpesa_guide() {
    print_status "Creating M-pesa integration guide..."
    
    cat > MPESA_SETUP.md << EOF
# M-pesa Integration Setup Guide

## 1. Get M-pesa API Credentials
1. Register for a Safaricom Developer Account at https://developer.safaricom.co.ke/
2. Create a new app to get your credentials
3. Update your .env file with the following values:
   - MPESA_CONSUMER_KEY
   - MPESA_CONSUMER_SECRET
   - MPESA_PASSKEY
   - MPESA_SHORTCODE

## 2. Configure PHPNuxBill for M-pesa
1. Login to PHPNuxBill admin panel
2. Go to Settings → Payment Gateway
3. Enable M-pesa payment gateway
4. Enter your M-pesa credentials
5. Set the callback URL to: https://your-domain.com/mpesa/callback

## 3. Test M-pesa Integration
1. Create a test user in PHPNuxBill
2. Try to make a payment using M-pesa
3. Check the logs for any errors

## 4. Production Setup
1. Change MPESA_ENVIRONMENT to "live" in .env
2. Update MPESA_CALLBACK_URL to your production domain
3. Ensure SSL is properly configured

## Troubleshooting
- Check PHPNuxBill logs for payment errors
- Verify M-pesa credentials are correct
- Ensure callback URL is accessible from internet
- Use ngrok for local testing: ngrok http 80
EOF
    
    print_success "M-pesa integration guide created: MPESA_SETUP.md"
}

# Create monitoring script
create_monitoring() {
    print_status "Creating monitoring scripts..."
    
    cat > monitor.sh << 'EOF'
#!/bin/bash

# WiFi Billing System Monitoring Script

# Colors
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

echo "=== WiFi Billing System Status ==="

# Check if containers are running
if docker-compose ps | grep -q "Up"; then
    echo -e "${GREEN}✓ Containers are running${NC}"
else
    echo -e "${RED}✗ Some containers are not running${NC}"
fi

# Check MySQL
if docker-compose exec mysql mysqladmin ping -h"localhost" -u"root" -p"${DB_PASSWORD}" --silent 2>/dev/null; then
    echo -e "${GREEN}✓ MySQL is running${NC}"
else
    echo -e "${RED}✗ MySQL is not responding${NC}"
fi

# Check web application
if curl -f http://localhost >/dev/null 2>&1; then
    echo -e "${GREEN}✓ Web application is accessible${NC}"
else
    echo -e "${RED}✗ Web application is not accessible${NC}"
fi

# Check RADIUS
if docker-compose exec freeradius radtest testing password localhost 0 testing123 2>/dev/null; then
    echo -e "${GREEN}✓ FreeRADIUS is working${NC}"
else
    echo -e "${YELLOW}⚠ FreeRADIUS test failed (this might be normal)${NC}"
fi

echo "=== End Status ==="
EOF
    
    chmod +x monitor.sh
    print_success "Monitoring script created: monitor.sh"
}

# Create backup script
create_backup_script() {
    print_status "Creating backup script..."
    
    cat > backup.sh << 'EOF'
#!/bin/bash

# WiFi Billing System Backup Script

BACKUP_DIR="/backups"
DATE=$(date +%Y%m%d_%H%M%S)
BACKUP_NAME="wifi_billing_backup_$DATE"

echo "Creating backup: $BACKUP_NAME"

# Create backup directory
mkdir -p $BACKUP_DIR

# Backup MySQL databases
docker-compose exec mysql mysqldump -u root -p"${DB_PASSWORD}" --all-databases > "$BACKUP_DIR/${BACKUP_NAME}.sql"

# Backup configuration files
tar -czf "$BACKUP_DIR/${BACKUP_NAME}_config.tar.gz" .env raddb/config_data/ conf/

# Clean old backups (keep last 30 days)
find $BACKUP_DIR -name "wifi_billing_backup_*" -mtime +30 -delete

echo "Backup completed: $BACKUP_NAME"
EOF
    
    chmod +x backup.sh
    print_success "Backup script created: backup.sh"
}

# Main setup function
main() {
    echo "=========================================="
    echo "WiFi Billing System Setup"
    echo "=========================================="
    
    check_dependencies
    setup_env
    generate_passwords
    start_containers
    wait_for_services
    setup_phpnuxbill
    setup_freeradius
    create_mikrotik_config
    create_mpesa_guide
    create_monitoring
    create_backup_script
    
    echo "=========================================="
    echo "Setup completed successfully!"
    echo "=========================================="
    echo ""
    echo "Next steps:"
    echo "1. Open http://localhost in your browser"
    echo "2. Complete the PHPNuxBill installation wizard"
    echo "3. Configure your MikroTik router using mikrotik_setup.rsc"
    echo "4. Set up M-pesa integration (see MPESA_SETUP.md)"
    echo "5. Run ./monitor.sh to check system status"
    echo ""
    echo "Generated files:"
    echo "- .env (environment configuration)"
    echo "- mikrotik_setup.rsc (MikroTik configuration)"
    echo "- MPESA_SETUP.md (M-pesa setup guide)"
    echo "- monitor.sh (system monitoring)"
    echo "- backup.sh (backup script)"
    echo ""
    echo "Default credentials:"
    echo "- Database: billing_user / (generated password)"
    echo "- PHPNuxBill: admin@yourdomain.com / admin123"
    echo "- RADIUS Secret: (generated password)"
    echo ""
    echo "For support, check the logs:"
    echo "- docker-compose logs app"
    echo "- docker-compose logs freeradius"
    echo "- docker-compose logs mysql"
}

# Run main function
main "$@" 